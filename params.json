{
  "name": "Swim博客",
  "tagline": "Java实现1~100奇数偶数交替打印",
  "body": "      这是博主最近看到一道题目，如何用两个线程实现1~100奇数偶数交替打印。刚开始拿到这道题目的时候，还在考虑是不是直接用if判断求余就可以实现。但是仔细想想，如何才能保证奇偶数交替打印，当时很蒙圈。然后又与面试官沟通交流，才明白这道题的真正意思，面试官的意思是如何保证这1~100个数用两个线程实现交替打印出来。然后仔细想想，这就是一道考察并发锁的问题，用到锁首先我们需要考虑到synchronized和可重入锁ReentrantLock,交替打印是这道题的关键，如何保证线程1和线程2互斥，线程1执行完后线程2执行？  不多说，直接上代码：\r\n\r\npackage com.swim.JiOuNum;\r\n\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n *\r\n * 1~100奇数偶数交替打印\r\n * <P>.Tiltle: com.swim.JiOuNum</p>   .\r\n * <p> Description:</p>\r\n *\r\n * @author swim .\r\n * @date 2018/6/21 15:12\r\n */\r\npublic class TwoThread {\r\n\r\n    private int start=1;\r\n    /**\r\n     * 保证内存可见性\r\n     * 其实用锁了之后也可以保证可见性 这里用不用 volatile 都一样\r\n     */\r\n    private volatile  boolean flag=false;//先打印基数再打印偶数   false 打印基数 true打印偶数\r\n\r\n    private final static Lock lock=new ReentrantLock();\r\n\r\n    public static class  OuNum implements Runnable{\r\n        private TwoThread number;\r\n\r\n        public OuNum(TwoThread number) {\r\n           this.number=number;\r\n        }\r\n\r\n        public void run() {\r\n            while(number.start<=100){\r\n                if (number.flag){\r\n                    try {\r\n                        lock.lock();\r\n                        System.out.println(Thread.currentThread().getName()+\"====>\"+number.start);\r\n                        number.start++;\r\n                        number.flag=false;\r\n                    }finally {\r\n                        lock.unlock();\r\n                    }\r\n                }else{\r\n                    try {\r\n                        Thread.sleep(10);\r\n                    }catch (InterruptedException e){\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static  class JiNum implements Runnable{\r\n        private TwoThread number;\r\n        public JiNum(TwoThread number){\r\n            this.number=number;\r\n        }\r\n        public void run() {\r\n            while(number.start<=100){\r\n                if (!number.flag){\r\n                  try {\r\n                      lock.lock();\r\n                      System.out.println(Thread.currentThread().getName()+\"====>\"+number.start);\r\n                      number.start++;\r\n                      number.flag=true;\r\n                  }finally {\r\n                      lock.unlock();\r\n                  }\r\n                }else {\r\n                    try {\r\n                        Thread.sleep(10);\r\n                    }catch (InterruptedException e){\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        TwoThread twoThread=new TwoThread();\r\n        Thread t1=new Thread(new JiNum(twoThread));\r\n        Thread t2=new Thread(new OuNum(twoThread));\r\n        t1.setName(\"基数线程a\");\r\n        t2.setName(\"偶数线程b\");\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n}\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}